.data
	A: .word 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0
	before: .asciiz			"The orginal array:\n"
	after: .asciiz			"The sorted array:\n"
	questionforn: .asciiz		"Input amount of intergers (<= 20) in array: "
	questionfornumber: .asciiz	"Input an integer: "
	space: .asciiz			" "
	breakdown: .asciiz		"\n"

.text

main:
	# Stores A
	la $a0, A
	
	# Go to input
	jal input
	
	# s1 stores n
	add $s1, $v0, $zero
	
	# Print string: before
	li $v0, 4
	la $a0, before
	syscall
	
	# Print array: before sort
	la $a0, A
	add $a1, $s1, $zero
	jal print
		
	# Sort
	la $a0, A
	add $a1, $s1, $zero
	jal sort
	
	# Print string: after
	li $v0, 4
	la $a0, after
	syscall
	
	# Print array: after sort
	la $a0, A
	add $a1, $s1, $zero
	jal print

exit:
	# exit system call
	li $v0, 10
	syscall
	
sort:	# Stack saving
	addi $sp, $sp, -20
	sw $ra, 16($sp)
	sw $s3, 12($sp)
	sw $s2, 8($sp)
	sw $s1, 4($sp)
	sw $s0, 0($sp)
	move $s2, $a0		# s2 = address array
	move $s3, $a1		# s3 = n
	add $s0, $zero, $zero 	# s0 = 0

for1st:
	slt $t0, $s0, $s3
	beq $t0, $zero, exit1
	addi $s1, $zero, -1	# s1 = -1
	
for2st:
	addi $s3, $s3, -1

	addi $s1, $s1, 1
	slt $t0, $s1, $s3

	addi $s3, $s3, 1
	beq $t0, $zero, exit2
	
	sll $t0, $s1, 2
	add $t0, $t0, $s2
	lw $t1, 0($t0)
	lw $t2, 4($t0)
		
	slt $t3, $t2, $t1
	beq $t3, $zero, for2st
	sw $t1, 4($t0)
	sw $t2, 0($t0)
	j for2st
exit1:
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	lw $s2, 8($sp)
	lw $s3, 12($sp)
	lw $ra, 16($sp)
	addi $sp, $sp, 20
	jr $ra
	
exit2:
	addi $s0, $s0, 1
	j for1st
		
		

input:
	# Stack saving
	addi $sp, $sp, -4	
	sw $a0, 0($sp)	
	
	# t4 save address of array	
	add $t4, $a0, $zero
	
	# Print string: questionforn
	li $v0, 4
	la $a0, questionforn
	syscall
	
	# Read integer: n 
	li $v0, 5
	syscall	
	
	# t0 stores n
	add $t0, $v0, $zero
	
	# i = 0
	add $t1, $zero, $zero	

forinput:
	# Stop if i == n (t1 == t0)
	beq $t1, $t0, inputend
	
	# t3 = t4 + 4*t1 ~ A[t1]
	sll $t2, $t1, 2
	add $t3, $t4, $t2
	
	# Print string: questionfornumber
	li $v0, 4
	la $a0, questionfornumber
	syscall	
	
	# Read integer: A[t1]
	li $v0, 5
	syscall
	sw $v0, 0($t3)
	
	# t1 increment
	addi $t1, $t1, 1
	j forinput

inputend:
	# shrink stack
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	
	# v0 stores n
	add $v0, $t0, $zero
	jr $ra

print:
	# stack saving
	addi $sp, $sp, -4
	sw $s0, 0($sp)
	
	# s0 saved address of array
	add $s0, $zero, $a0
	
	# t0 = 0
	add $t0, $zero, $zero
	
	# a1 = n - 1
	addi $a1, $a1, -1

forprint:
	# get address a[t0]
	add $t1, $t0, $t0
	add $t1, $t1, $t1
	add $t2, $t1, $s0
	
	# print integer
	li $v0, 1
	lw $a0, 0($t2)
	syscall	
	
	# print space
	li $v0, 4
	la $a0, space
	syscall
	
	beq $t0, $a1, endforprint
	addi $t0, $t0, 1
	j forprint

endforprint:
	# shrink back
	lw $s0, 0($sp)
	addi $sp, $sp, 4
	
	# print breakdown
	li $v0, 4
	la $a0, breakdown
	syscall
	
	# jump back
	jr $ra
